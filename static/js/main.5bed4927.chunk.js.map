{"version":3,"sources":["Boid.js","App.js","index.js"],"names":["Boid","boid","offset","x","y","style","width","height","position","top","left","backgroundColor","borderRadius","getRandomInt","max","Math","floor","random","withStyles","root","display","flexDirection","justifyContent","header","textAlign","color","margin","content","footer","canvas","inputContainer","padding","marginBottom","numBirdsControl","alignItems","classes","useRef","useState","setOffset","id","Date","now","vx","vy","boids","setBoids","numBirds","setNumBirds","trunc","birdSpeed","setBirdSpeed","avoidCrowd","setAvoidCrowd","useEffect","current","getBoundingClientRect","_boids","setTimeout","map","self","otherBoids","filter","avgX","b","reduce","acc","cur","length","avgY","newVx","newVy","magnitude","sqrt","pow","accVx","accVy","forEach","other","accMagnitude","newX","newY","difference","i","abs","slice","addRemoveBoids","handleClick","newNumBirds","className","Title","ref","index","key","Text","disabled","shape","onClick","value","min","onChange","step","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5bed4927.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Boid({ boid, offset }) {\n  if (!offset.x && !offset.y) return (<></>);\n\n  return (\n    <div\n      style={{\n        width: '10px',\n        height: '10px',\n        position: 'absolute',\n        top: offset.y + boid.y,\n        left: offset.x + boid.x,\n        backgroundColor: '#fadb14',\n        borderRadius: '50%'\n      }}\n    />\n  );\n}\n\nexport default Boid;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { withStyles } from '@material-ui/styles';\nimport { Button, Slider, Typography } from 'antd';\nimport Boid from './Boid';\n\nconst styles = () => ({\n  root: {\n    height: '100%',\n    backgroundColor: '#434343',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between'\n  },\n  header: {\n    textAlign: 'center',\n    '& > h1': {\n      color: '#ffffff',\n      margin: '0.5em 0 -0.5em'\n    }\n  },\n  content: {\n    width: '900px',\n    display: 'flex',\n    margin: 'auto'\n  },\n  footer: {\n    textAlign: 'center',\n    backgroundColor: '#8c8c8c'\n  },\n  canvas: {\n    width: '600px',\n    height: '600px',\n    backgroundColor: '#000000'\n  },\n  inputContainer: {\n    width: '300px',\n    height: '600px',\n    padding: '1rem',\n    backgroundColor: '#595959',\n    '& > span': {\n      color: '#ffffff'\n    },\n    '& > div.ant-slider': {\n      marginBottom: '2rem',\n      '& > div.ant-slider-rail': {\n        backgroundColor: '#8c8c8c'\n      }\n    }\n  },\n  numBirdsControl: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    margin: '0.5rem 0 1.5rem',\n    '& > button': {\n      width: '6rem'\n    },\n    '& > span': {\n      color: '#ffffff'\n    }\n  }\n});\n\nconst minNumBirds = 2;\nconst maxNumBirds = 30;\nconst minBirdSpeed = 3;\nconst maxBirdSpeed = 8;\nconst minAvoidCrowd = 1;\nconst maxAvoidCrowd = 5;\n\nconst getRandomInt = max => {\n  return Math.floor(Math.random() * Math.floor(max));\n};\n\nfunction App({ classes }) {\n  const canvas = useRef(null);\n  const [offset, setOffset] = useState({ x: 0, y: 0 });\n  const [boids, setBoids] = useState([\n    { id: Date.now() - 1, x: getRandomInt(600), y: getRandomInt(600), vx: 0, vy: 0 },\n    { id: Date.now(), x: getRandomInt(600), y: getRandomInt(600), vx: 0, vy: 0 }\n  ]);\n  const [numBirds, setNumBirds] = useState(minNumBirds);\n  const [birdSpeed, setBirdSpeed] = useState(\n    Math.trunc((minBirdSpeed + maxBirdSpeed) / 2)\n  );\n  const [avoidCrowd, setAvoidCrowd] = useState(\n    Math.trunc((minAvoidCrowd + maxAvoidCrowd) / 2)\n  );\n\n  useEffect(() => {\n    if (canvas.current) {\n      const { x, y } = canvas.current.getBoundingClientRect();\n      setOffset({ x, y });\n    }\n  }, [canvas]);\n\n  useEffect(() => {\n    let _boids = boids;\n\n    const applyRule1 = () => {\n      _boids = _boids.map(self => {\n        const otherBoids = _boids.filter(boid => self.id !== boid.id);\n        const avgX = otherBoids.map(b => b.x).reduce((acc, cur) => {\n          return acc + cur;\n        }) / otherBoids.length;\n        const avgY = otherBoids.map(b => b.y).reduce((acc, cur) => {\n          return acc + cur;\n        }) / otherBoids.length;\n        let newVx = avgX - self.x;\n        let newVy = avgY - self.y;\n        const magnitude = Math.sqrt(Math.pow(newVx, 2) + Math.pow(newVy, 2));\n\n        return {\n          ...self,\n          vx: newVx / magnitude,\n          vy: newVy / magnitude\n        };\n      });\n    };\n\n    const applyRule2 = () => {\n      _boids = _boids.map(self => {\n        const otherBoids = _boids.filter(boid => self.id !== boid.id);\n        let accVx = 0;\n        let accVy = 0;\n        otherBoids.forEach(other => {\n          const distance = Math.sqrt(\n            Math.pow(self.x - other.x, 2) + Math.pow(self.y - other.y, 2)\n          );\n          if (distance < avoidCrowd * 20) {\n            let newVx = self.x - other.x;\n            let newVy = self.y - other.y;\n            const magnitude = Math.sqrt(Math.pow(newVx, 2) + Math.pow(newVy, 2));\n            newVx = newVx / magnitude;\n            newVy = newVy / magnitude;\n            accVx += newVx;\n            accVy += newVy;\n            const accMagnitude = Math.sqrt(Math.pow(accVx, 2) + Math.pow(accVy, 2));\n            accVx /= accMagnitude;\n            accVy /= accMagnitude;\n          }\n        });\n\n        return {\n          ...self,\n          vx: accVx ? accVx : self.vx,\n          vy: accVy ? accVy : self.vy\n        };\n      });\n    };\n\n    // const applyRule3 = () => {\n    // };\n\n    const moveBoids = () => {\n      _boids = _boids.map(boid => {\n        let newX = boid.x + birdSpeed * boid.vx;\n        let newY = boid.y + birdSpeed * boid.vy;\n        if (newX < 0) newX = 0;\n        if (newX > 600) newX = 600;\n        if (newY < 0) newY = 0;\n        if (newY > 600) newY = 600;\n        return {\n          ...boid,\n          x: newX,\n          y: newY\n        };\n      });\n    };\n\n    const addRemoveBoids = () => {\n      const difference = numBirds - _boids.length;\n      if (difference > 0) {\n        for (let i = 0; i < difference; i++) {\n          _boids = [..._boids, {\n            id: Date.now(),\n            x: getRandomInt(600),\n            y: getRandomInt(600),\n            vx: 0,\n            vy: 0\n          }];\n        }\n      } else if (difference < 0) {\n        for (let i = 0; i < Math.abs(difference); i++) {\n          _boids = _boids.slice(0, boids.length - 1);\n        }\n      }\n    };\n\n    setTimeout(() => {\n      applyRule1(); // boids move towards center perceived of mass\n      applyRule2(); // boids try to keep a small distance away from other boids\n      // applyRule3();\n      moveBoids();\n      addRemoveBoids();\n      setBoids(_boids);\n    }, 1000 / 5);\n  }, [boids]);\n\n\n  const handleClick = newNumBirds => {\n    if (\n      newNumBirds !== numBirds &&\n      newNumBirds >= minNumBirds &&\n      newNumBirds <= maxNumBirds\n    ) {\n      setNumBirds(newNumBirds);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.header}>\n        <Typography.Title>Simulating Flocking Behavior</Typography.Title>\n      </div>\n      <div className={classes.content}>\n        <div className={classes.canvas} ref={canvas}>\n          {boids.map((boid, index) => {\n            return (\n              <Boid key={index} boid={boid} offset={offset} />\n            );\n          })}\n        </div>\n        <div className={classes.inputContainer}>\n          <Typography.Text>\n            Number of birds\n          </Typography.Text>\n          <div className={classes.numBirdsControl}>\n            <Button\n              disabled={numBirds === minNumBirds}\n              shape=\"round\"\n              onClick={() => handleClick(numBirds - 1)}\n            >\n              Remove\n            </Button>\n            <Typography.Text>\n              {numBirds}\n            </Typography.Text>\n            <Button\n              disabled={numBirds === maxNumBirds}\n              shape=\"round\"\n              onClick={() => handleClick(numBirds + 1)}\n            >\n              Add\n            </Button>\n          </div>\n          <Typography.Text>\n            Speed\n          </Typography.Text>\n          <Slider\n            value={birdSpeed}\n            min={minBirdSpeed}\n            max={maxBirdSpeed}\n            onChange={(value) => setBirdSpeed(value)}\n          />\n          <Typography.Text>\n            Tendency to avoid crowding\n          </Typography.Text>\n          <Slider\n            step={0.5}\n            value={avoidCrowd}\n            min={minAvoidCrowd}\n            max={maxAvoidCrowd}\n            onChange={(value) => setAvoidCrowd(value)}\n          />\n        </div>\n      </div>\n      <div className={classes.footer}>\n        <Typography.Text>\n          COGS 300 Group 12 - Hary Chow, Raymond Chuong, Jenna Fletcher, Mingyu Gao\n        </Typography.Text>\n      </div>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'antd/dist/antd.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}